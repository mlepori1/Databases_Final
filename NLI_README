Michael Lepori/Parth Singh
Databases 315/415 Final Project

Natural Language Parser README

Dependencies:
The natural language parser requires Spacy and its "EN" Model.
Download this here: https://spacy.io/usage/models

Supported Data:
Simple queries about the following are supported:
-Hike length
-Hike location (State)
-Hike difficulty
-What type (leashed/off-leashed/any) of dogs are/aren't allowed?
-Average rating

Assumptions about database structure (tables capitalized here for clarity, 
should be only first-letter capitalized in the acutal database) :

Assumes that everything is basically as specified in the phase 1 document EXCEPT:

In LOCATIONS table, state is replaced by state_code

GEOGRAPHIC_FEATURES and OPPORTUNITIES are removed, replaced with FEATURES and DOGS
    - FEATURES contains all information in feature list generated by the web_crawler
    - DOGS only contains Hike_ID and Dog, which takes on the values "Leashed", "Off-leash",
      "Unknown", and "No Dogs"

Assumptions about natural language queries:
    For rating queries: MUST SAY "rated (above/more than/higher than/etc.) X stars" KEYWORD: rated, stars
    For dog queries: MUST SAY "(does not/does) allow (leashed/off-leashed/BLANK) dogs" KEYWORD: allow, dog/dogs
    For length queries: MUST SAY "(longer/shorter) than X miles" KEYWORD: longer/shorter, miles
    For difficulty queries: KEYWORD: easy/intermediate/difficult
    For state queries: KEYWORD: any state name

Example Queries:

    "Show me all easy trails that are in California or Montana and do not allow leashed dogs that are rated 
    above 3.5 stars and that are longer than 2 miles and shorter than 5 miles."

    GENERATES:

    SELECT Name
    FROM Hike, HikeName, Locations, Ratings, Dogs
    WHERE Hike.HikeID = HikeName.HikeID AND Hike.HikeID = Locations.HikeID
    AND Hike.HikeID = Ratings.HikeID AND Hike.HikeID = Dogs.HikeID
    AND (Locations.State LIKE "CA" OR Locations.State LIKE "MT")
    AND Hike.Length > 2
    AND Hike.Length < 5
    AND Dogs.Dog NOT LIKE "Leashed"
    AND Hike.difficulty LIKE "easy"
    AND Ratings.Average_Rating >= 3.5
    ;

    "Show me all trails that are not difficult and are in New York and rated more than 2.5 stars."

    GENERATES:

    SELECT Name
    FROM Hike, HikeName, Locations, Ratings, Dogs
    WHERE Hike.HikeID = HikeName.HikeID AND Hike.HikeID = Locations.HikeID
    AND Hike.HikeID = Ratings.HikeID AND Hike.HikeID = Dogs.HikeID
    AND (Locations.State LIKE "NY")
    AND Hike.difficulty NOT LIKE "difficult"
    AND Ratings.Average_Rating >= 2.5
    ;


I HAVE INCLUDED A MAIN METHOD FOR YOU TO PLAY AROUND WITH IF YOU WANT TO TEST SOME LANGUAGE Queries,
SHOULD PROBABLY REMOVE BEFORE INTEGRATING WITH OTHER STUFF